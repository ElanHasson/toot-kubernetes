apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: mastodon
    app.kubernetes.io/name: mastodon
  name: mastodon-sidekiq-default
  namespace: mastodon
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: sidekiq-default
      app.kubernetes.io/instance: mastodon
      app.kubernetes.io/name: mastodon
      app.kubernetes.io/part-of: rails
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: sidekiq-default
        app.kubernetes.io/instance: mastodon
        app.kubernetes.io/name: mastodon
        app.kubernetes.io/part-of: rails
    spec:
      nodeSelector:
        doks.digitalocean.com/node-pool: pool-sidekiq-3
      tolerations:
        - effect: NoSchedule
          key: limit
          operator: Equal
          value: sidekiq
      containers:
        - command:
            - bundle
            - exec
            - sidekiq
            - -q
            - default
            - -c
            - "25"
          env:
            - name: DB_POOL
              value: "25"
          envFrom:
            - configMapRef:
                name: mastodon-env
            - secretRef:
                name: mastodon-secrets-env
          image: tootsuite/mastodon:v4.0.2
          imagePullPolicy: IfNotPresent
          name: mastodon
          resources:
            requests:
              cpu: 500m
              memory: 350Mi
      restartPolicy: Always
      securityContext:
        fsGroup: 991
        runAsGroup: 991
        runAsUser: 991
      serviceAccountName: mastodon
      terminationGracePeriodSeconds: 30
