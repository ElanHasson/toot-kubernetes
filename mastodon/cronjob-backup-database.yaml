apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup-postgres-database
  namespace: mastodon
spec:
  schedule: "0 1 * * *" # Daily at 01:00.
  jobTemplate:
    spec:
      template:
        metadata:
          name: backup-postgres-database
        spec:
          restartPolicy: OnFailure
          volumes:
            - name: backup-dir
              emptyDir: { }
            - name: awscli-credentials
              secret:
                secretName: spaces-credentials-for-db-backup
                defaultMode: 0400
          containers:
            - name: create-database-backup
              image: postgres:14-alpine
              imagePullPolicy: IfNotPresent
              resources:
                requests:
                  cpu: 1000m # compression-heavy work
              command:
                - bash
                - -c
                - "NAME=mastodon-db-$(date +%Y-%m-%d).dump && pg_dump --host=$DB_HOST --port=$DB_PORT --username=$DB_USER --dbname=$DB_NAME --format=c --file=/backup/in_progress-$NAME && mv /backup/in_progress-$NAME /backup/complete-$NAME"
              volumeMounts:
                - mountPath: /backup
                  name: backup-dir
              env:
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: mastodon-secrets-env
                      key: DB_PASS
                - name: DB_HOST
                  valueFrom:
                    configMapKeyRef:
                      name: mastodon-env
                      key: DB_HOST
                - name: DB_USER
                  valueFrom:
                    configMapKeyRef:
                      name: mastodon-env
                      key: DB_USER
                - name: DB_NAME
                  value: mastodon # bypass the pgbouncer config
                - name: DB_PORT
                  value: "25060" # bypass the pgbouncer config
            - name: transfer-postgres-backup
              image: amazon/aws-cli:2.9.2
              command:
                - bash
                - -c
                - "until ls /backup/ | grep complete-; do echo 'waiting for complete backup..'; sleep 3; done && aws --profile=digitalocean --endpoint=https://ams3.digitaloceanspaces.com s3 cp /backup/* s3://backup-toot-community/db-postgresql/"
              volumeMounts:
                - mountPath: /backup
                  name: backup-dir
                - mountPath: /root/.aws
                  name: awscli-credentials

